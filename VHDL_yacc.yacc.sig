signature Whl_TOKENS =
sig
type ('a,'b) token
type svalue
val DEFAULT:  'a * 'a -> (svalue,'a) token
val PROPERTY:  'a * 'a -> (svalue,'a) token
val SEQUENCE:  'a * 'a -> (svalue,'a) token
val NUM:  'a * 'a -> (svalue,'a) token
val UPPER_CASE:  'a * 'a -> (svalue,'a) token
val LOWER_CASE:  'a * 'a -> (svalue,'a) token
val ATTRIBUTE:  'a * 'a -> (svalue,'a) token
val E:  'a * 'a -> (svalue,'a) token
val B:  'a * 'a -> (svalue,'a) token
val O:  'a * 'a -> (svalue,'a) token
val X:  'a * 'a -> (svalue,'a) token
val UB:  'a * 'a -> (svalue,'a) token
val UO:  'a * 'a -> (svalue,'a) token
val UX:  'a * 'a -> (svalue,'a) token
val SB:  'a * 'a -> (svalue,'a) token
val SO:  'a * 'a -> (svalue,'a) token
val SX:  'a * 'a -> (svalue,'a) token
val D:  'a * 'a -> (svalue,'a) token
val CONTEXT:  'a * 'a -> (svalue,'a) token
val MODE:  'a * 'a -> (svalue,'a) token
val EXP:  'a * 'a -> (svalue,'a) token
val PRIVATE:  'a * 'a -> (svalue,'a) token
val PARAMETER:  'a * 'a -> (svalue,'a) token
val TYPE_MARK:  'a * 'a -> (svalue,'a) token
val EXPRESSION:  'a * 'a -> (svalue,'a) token
val VIEW:  'a * 'a -> (svalue,'a) token
val FORCE:  'a * 'a -> (svalue,'a) token
val RELEASE:  'a * 'a -> (svalue,'a) token
val ADT:  'a * 'a -> (svalue,'a) token
val RELOP6:  'a * 'a -> (svalue,'a) token
val RELOP5:  'a * 'a -> (svalue,'a) token
val RELOP4:  'a * 'a -> (svalue,'a) token
val RELOP3:  'a * 'a -> (svalue,'a) token
val RELOP2:  'a * 'a -> (svalue,'a) token
val RELOP1:  'a * 'a -> (svalue,'a) token
val LEFTDOUBLE:  'a * 'a -> (svalue,'a) token
val RIGHTDOUBLE:  'a * 'a -> (svalue,'a) token
val BACKSLASH:  'a * 'a -> (svalue,'a) token
val CARROT:  'a * 'a -> (svalue,'a) token
val ID:  'a * 'a -> (svalue,'a) token
val STRINGG:  'a * 'a -> (svalue,'a) token
val ELEMENT:  'a * 'a -> (svalue,'a) token
val HEX_VEC:  'a * 'a -> (svalue,'a) token
val DEC_VEC:  'a * 'a -> (svalue,'a) token
val BIN_VEC:  'a * 'a -> (svalue,'a) token
val REALEXP_NUM:  'a * 'a -> (svalue,'a) token
val BIN_NUM:  'a * 'a -> (svalue,'a) token
val HEX_NUM:  'a * 'a -> (svalue,'a) token
val REAL_NUM:  'a * 'a -> (svalue,'a) token
val INT:  'a * 'a -> (svalue,'a) token
val TRUE:  'a * 'a -> (svalue,'a) token
val FALSE:  'a * 'a -> (svalue,'a) token
val FAILURE:  'a * 'a -> (svalue,'a) token
val FILE_OPEN_STATUS:  'a * 'a -> (svalue,'a) token
val FILE_OPEN_KIND:  'a * 'a -> (svalue,'a) token
val SEVERITY_LEVEL:  'a * 'a -> (svalue,'a) token
val NATURAL:  'a * 'a -> (svalue,'a) token
val CHARACTER:  'a * 'a -> (svalue,'a) token
val BOOLEAN:  'a * 'a -> (svalue,'a) token
val NUMERIC:  'a * 'a -> (svalue,'a) token
val TIME:  'a * 'a -> (svalue,'a) token
val INTEGER:  'a * 'a -> (svalue,'a) token
val STRING:  'a * 'a -> (svalue,'a) token
val BIT_VECTOR:  'a * 'a -> (svalue,'a) token
val BIT:  'a * 'a -> (svalue,'a) token
val STD_ULOGIC_VECTOR:  'a * 'a -> (svalue,'a) token
val STD_ULOGIC:  'a * 'a -> (svalue,'a) token
val STD_LOGIC_VECTOR:  'a * 'a -> (svalue,'a) token
val STD_LOGIC:  'a * 'a -> (svalue,'a) token
val LEN:  'a * 'a -> (svalue,'a) token
val POS:  'a * 'a -> (svalue,'a) token
val ELT:  'a * 'a -> (svalue,'a) token
val LST:  'a * 'a -> (svalue,'a) token
val VAL:  'a * 'a -> (svalue,'a) token
val VUNIT:  'a * 'a -> (svalue,'a) token
val XOR:  'a * 'a -> (svalue,'a) token
val XNOR:  'a * 'a -> (svalue,'a) token
val WITH:  'a * 'a -> (svalue,'a) token
val WHILE:  'a * 'a -> (svalue,'a) token
val WHEN:  'a * 'a -> (svalue,'a) token
val WAIT:  'a * 'a -> (svalue,'a) token
val VARIABLE:  'a * 'a -> (svalue,'a) token
val USE:  'a * 'a -> (svalue,'a) token
val UNTIL:  'a * 'a -> (svalue,'a) token
val UNITS:  'a * 'a -> (svalue,'a) token
val UNAFFECTED:  'a * 'a -> (svalue,'a) token
val TYPE:  'a * 'a -> (svalue,'a) token
val TRANSPORT:  'a * 'a -> (svalue,'a) token
val TO:  'a * 'a -> (svalue,'a) token
val THEN:  'a * 'a -> (svalue,'a) token
val SUBTYPE:  'a * 'a -> (svalue,'a) token
val SRL:  'a * 'a -> (svalue,'a) token
val SRA:  'a * 'a -> (svalue,'a) token
val SLL:  'a * 'a -> (svalue,'a) token
val SLA:  'a * 'a -> (svalue,'a) token
val SIGNAL:  'a * 'a -> (svalue,'a) token
val SHARED:  'a * 'a -> (svalue,'a) token
val SEVERITY:  'a * 'a -> (svalue,'a) token
val SELECT:  'a * 'a -> (svalue,'a) token
val ROR:  'a * 'a -> (svalue,'a) token
val ROL:  'a * 'a -> (svalue,'a) token
val RETURN:  'a * 'a -> (svalue,'a) token
val REPORT:  'a * 'a -> (svalue,'a) token
val REM:  'a * 'a -> (svalue,'a) token
val REJECT:  'a * 'a -> (svalue,'a) token
val REGISTER:  'a * 'a -> (svalue,'a) token
val RECORD:  'a * 'a -> (svalue,'a) token
val RANGE:  'a * 'a -> (svalue,'a) token
val PURE:  'a * 'a -> (svalue,'a) token
val PROTECTED:  'a * 'a -> (svalue,'a) token
val PROCESS:  'a * 'a -> (svalue,'a) token
val PROCEDURE:  'a * 'a -> (svalue,'a) token
val POSTPONED:  'a * 'a -> (svalue,'a) token
val PORT:  'a * 'a -> (svalue,'a) token
val PACKAGE:  'a * 'a -> (svalue,'a) token
val OUT:  'a * 'a -> (svalue,'a) token
val OTHERS:  'a * 'a -> (svalue,'a) token
val OR:  'a * 'a -> (svalue,'a) token
val OPEN:  'a * 'a -> (svalue,'a) token
val ON:  'a * 'a -> (svalue,'a) token
val OF:  'a * 'a -> (svalue,'a) token
val NULL:  'a * 'a -> (svalue,'a) token
val NOT:  'a * 'a -> (svalue,'a) token
val NOR:  'a * 'a -> (svalue,'a) token
val NEXT:  'a * 'a -> (svalue,'a) token
val NEW:  'a * 'a -> (svalue,'a) token
val NAND:  'a * 'a -> (svalue,'a) token
val MOD:  'a * 'a -> (svalue,'a) token
val MAP:  'a * 'a -> (svalue,'a) token
val LOOP:  'a * 'a -> (svalue,'a) token
val LITERAL:  'a * 'a -> (svalue,'a) token
val LINKAGE:  'a * 'a -> (svalue,'a) token
val LIBRARY:  'a * 'a -> (svalue,'a) token
val LABEL:  'a * 'a -> (svalue,'a) token
val IS:  'a * 'a -> (svalue,'a) token
val INOUT:  'a * 'a -> (svalue,'a) token
val INERTIAL:  'a * 'a -> (svalue,'a) token
val IN:  'a * 'a -> (svalue,'a) token
val IMPURE:  'a * 'a -> (svalue,'a) token
val IF:  'a * 'a -> (svalue,'a) token
val GUARDED:  'a * 'a -> (svalue,'a) token
val GROUP:  'a * 'a -> (svalue,'a) token
val GENERIC:  'a * 'a -> (svalue,'a) token
val GENERATE:  'a * 'a -> (svalue,'a) token
val FUNCTION:  'a * 'a -> (svalue,'a) token
val FOR:  'a * 'a -> (svalue,'a) token
val FILE:  'a * 'a -> (svalue,'a) token
val EXIT:  'a * 'a -> (svalue,'a) token
val ENTITY:  'a * 'a -> (svalue,'a) token
val END:  'a * 'a -> (svalue,'a) token
val ELSIF:  'a * 'a -> (svalue,'a) token
val ELSE:  'a * 'a -> (svalue,'a) token
val DOWNTO:  'a * 'a -> (svalue,'a) token
val DISCONNECT:  'a * 'a -> (svalue,'a) token
val CONSTANT:  'a * 'a -> (svalue,'a) token
val CONFIGURATION:  'a * 'a -> (svalue,'a) token
val COMPONENT:  'a * 'a -> (svalue,'a) token
val CASE:  'a * 'a -> (svalue,'a) token
val BUS:  'a * 'a -> (svalue,'a) token
val BUFFER:  'a * 'a -> (svalue,'a) token
val BODY:  'a * 'a -> (svalue,'a) token
val BLOCK:  'a * 'a -> (svalue,'a) token
val BEGIN:  'a * 'a -> (svalue,'a) token
val ATRIBUTE:  'a * 'a -> (svalue,'a) token
val ASSERT:  'a * 'a -> (svalue,'a) token
val ARRAY:  'a * 'a -> (svalue,'a) token
val ARCHITECTURE:  'a * 'a -> (svalue,'a) token
val AND:  'a * 'a -> (svalue,'a) token
val ALL:  'a * 'a -> (svalue,'a) token
val ALIAS:  'a * 'a -> (svalue,'a) token
val AFTER:  'a * 'a -> (svalue,'a) token
val ACCESS:  'a * 'a -> (svalue,'a) token
val ABS:  'a * 'a -> (svalue,'a) token
val RSQUARE:  'a * 'a -> (svalue,'a) token
val LSQUARE:  'a * 'a -> (svalue,'a) token
val BAR:  'a * 'a -> (svalue,'a) token
val GT:  'a * 'a -> (svalue,'a) token
val EQ:  'a * 'a -> (svalue,'a) token
val LT:  'a * 'a -> (svalue,'a) token
val SEMICOLON:  'a * 'a -> (svalue,'a) token
val COLON:  'a * 'a -> (svalue,'a) token
val DIV:  'a * 'a -> (svalue,'a) token
val DOT:  'a * 'a -> (svalue,'a) token
val MINUS:  'a * 'a -> (svalue,'a) token
val COMMA:  'a * 'a -> (svalue,'a) token
val PLUS:  'a * 'a -> (svalue,'a) token
val MULT:  'a * 'a -> (svalue,'a) token
val RPARAN:  'a * 'a -> (svalue,'a) token
val LPARAN:  'a * 'a -> (svalue,'a) token
val DOUBLEQUES:  'a * 'a -> (svalue,'a) token
val DOUBLEARROW:  'a * 'a -> (svalue,'a) token
val QUESTION:  'a * 'a -> (svalue,'a) token
val INVERTEDCOMMA:  'a * 'a -> (svalue,'a) token
val HASH:  'a * 'a -> (svalue,'a) token
val BACKTICK:  'a * 'a -> (svalue,'a) token
val UNDERSCORE:  'a * 'a -> (svalue,'a) token
val TICK:  'a * 'a -> (svalue,'a) token
val AMP:  'a * 'a -> (svalue,'a) token
val BOX:  'a * 'a -> (svalue,'a) token
val LE:  'a * 'a -> (svalue,'a) token
val GE:  'a * 'a -> (svalue,'a) token
val NEQ:  'a * 'a -> (svalue,'a) token
val ASSIGN:  'a * 'a -> (svalue,'a) token
val EXPT:  'a * 'a -> (svalue,'a) token
val ARROW:  'a * 'a -> (svalue,'a) token
val EOF:  'a * 'a -> (svalue,'a) token
end
signature Whl_LRVALS=
sig
structure Tokens : Whl_TOKENS
structure ParserData:PARSER_DATA
sharing type ParserData.Token.token = Tokens.token
sharing type ParserData.svalue = Tokens.svalue
end
