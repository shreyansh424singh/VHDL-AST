signature Whl_TOKENS =
sig
type ('a,'b) token
type svalue
val BASED_INTEGER: (string*int) *  'a * 'a -> (svalue,'a) token
val INTEGER: (int) *  'a * 'a -> (svalue,'a) token
val EXPONENT: (string*int) *  'a * 'a -> (svalue,'a) token
val OTHER_SPECIAL_CHARACTER: (string*int) *  'a * 'a -> (svalue,'a) token
val STRING_LITERAL: (string*int) *  'a * 'a -> (svalue,'a) token
val CHARACTER_LITERAL: (string*int) *  'a * 'a -> (svalue,'a) token
val LETTER: (string*int) *  'a * 'a -> (svalue,'a) token
val EXTENDED_IDENTIFIER: (string*int) *  'a * 'a -> (svalue,'a) token
val BASIC_IDENTIFIER: (string*int) *  'a * 'a -> (svalue,'a) token
val REAL_LITERAL: (string*int) *  'a * 'a -> (svalue,'a) token
val BIT_STRING_LITERAL_HEX: (string*int) *  'a * 'a -> (svalue,'a) token
val BIT_STRING_LITERAL_OCTAL: (string*int) *  'a * 'a -> (svalue,'a) token
val BIT_STRING_LITERAL_BINARY: (string*int) *  'a * 'a -> (svalue,'a) token
val BIT_STRING_LITERAL: (string*int) *  'a * 'a -> (svalue,'a) token
val BASE_LITERAL: (string*int) *  'a * 'a -> (svalue,'a) token
val DEFAULT: (int) *  'a * 'a -> (svalue,'a) token
val PROPERTY: (int) *  'a * 'a -> (svalue,'a) token
val SEQUENCE: (int) *  'a * 'a -> (svalue,'a) token
val ATTRIBUTE: (int) *  'a * 'a -> (svalue,'a) token
val B: (int) *  'a * 'a -> (svalue,'a) token
val O: (int) *  'a * 'a -> (svalue,'a) token
val X: (int) *  'a * 'a -> (svalue,'a) token
val UB: (int) *  'a * 'a -> (svalue,'a) token
val UO: (int) *  'a * 'a -> (svalue,'a) token
val UX: (int) *  'a * 'a -> (svalue,'a) token
val SB: (int) *  'a * 'a -> (svalue,'a) token
val SO: (int) *  'a * 'a -> (svalue,'a) token
val SX: (int) *  'a * 'a -> (svalue,'a) token
val D: (int) *  'a * 'a -> (svalue,'a) token
val CONTEXT: (int) *  'a * 'a -> (svalue,'a) token
val EXP: (int) *  'a * 'a -> (svalue,'a) token
val PRIVATE: (int) *  'a * 'a -> (svalue,'a) token
val PARAMETER: (int) *  'a * 'a -> (svalue,'a) token
val TYPE_MARK: (int) *  'a * 'a -> (svalue,'a) token
val EXPRESSION: (int) *  'a * 'a -> (svalue,'a) token
val VIEW: (int) *  'a * 'a -> (svalue,'a) token
val FORCE: (int) *  'a * 'a -> (svalue,'a) token
val RELEASE: (int) *  'a * 'a -> (svalue,'a) token
val ADT: (int) *  'a * 'a -> (svalue,'a) token
val RELOP6: (int) *  'a * 'a -> (svalue,'a) token
val RELOP5: (int) *  'a * 'a -> (svalue,'a) token
val RELOP4: (int) *  'a * 'a -> (svalue,'a) token
val RELOP3: (int) *  'a * 'a -> (svalue,'a) token
val RELOP2: (int) *  'a * 'a -> (svalue,'a) token
val RELOP1: (int) *  'a * 'a -> (svalue,'a) token
val LEFTDOUBLE: (int) *  'a * 'a -> (svalue,'a) token
val RIGHTDOUBLE: (int) *  'a * 'a -> (svalue,'a) token
val BACKSLASH: (int) *  'a * 'a -> (svalue,'a) token
val CARROT: (int) *  'a * 'a -> (svalue,'a) token
val ID: (int) *  'a * 'a -> (svalue,'a) token
val STRINGG: (int) *  'a * 'a -> (svalue,'a) token
val ELEMENT: (int) *  'a * 'a -> (svalue,'a) token
val HEX_VEC: (int) *  'a * 'a -> (svalue,'a) token
val DEC_VEC: (int) *  'a * 'a -> (svalue,'a) token
val BIN_VEC: (int) *  'a * 'a -> (svalue,'a) token
val REALEXP_NUM: (int) *  'a * 'a -> (svalue,'a) token
val BIN_NUM: (int) *  'a * 'a -> (svalue,'a) token
val OCT_NUM: (int) *  'a * 'a -> (svalue,'a) token
val HEX_NUM: (int) *  'a * 'a -> (svalue,'a) token
val REAL_NUM: (int) *  'a * 'a -> (svalue,'a) token
val INT: (string*int) *  'a * 'a -> (svalue,'a) token
val E: (int) *  'a * 'a -> (svalue,'a) token
val LEN: (int) *  'a * 'a -> (svalue,'a) token
val POS: (int) *  'a * 'a -> (svalue,'a) token
val ELT: (int) *  'a * 'a -> (svalue,'a) token
val LST: (int) *  'a * 'a -> (svalue,'a) token
val VAL: (int) *  'a * 'a -> (svalue,'a) token
val VUNIT: (int) *  'a * 'a -> (svalue,'a) token
val XOR: (int) *  'a * 'a -> (svalue,'a) token
val XNOR: (int) *  'a * 'a -> (svalue,'a) token
val WITH: (int) *  'a * 'a -> (svalue,'a) token
val WHILE: (int) *  'a * 'a -> (svalue,'a) token
val WHEN: (int) *  'a * 'a -> (svalue,'a) token
val WAIT: (int) *  'a * 'a -> (svalue,'a) token
val VARIABLE: (int) *  'a * 'a -> (svalue,'a) token
val USE: (int) *  'a * 'a -> (svalue,'a) token
val UNTIL: (int) *  'a * 'a -> (svalue,'a) token
val UNITS: (int) *  'a * 'a -> (svalue,'a) token
val UNAFFECTED: (int) *  'a * 'a -> (svalue,'a) token
val TYPE: (int) *  'a * 'a -> (svalue,'a) token
val TRANSPORT: (int) *  'a * 'a -> (svalue,'a) token
val TO: (int) *  'a * 'a -> (svalue,'a) token
val THEN: (int) *  'a * 'a -> (svalue,'a) token
val SUBTYPE: (int) *  'a * 'a -> (svalue,'a) token
val SRL: (int) *  'a * 'a -> (svalue,'a) token
val SRA: (int) *  'a * 'a -> (svalue,'a) token
val SLL: (int) *  'a * 'a -> (svalue,'a) token
val SLA: (int) *  'a * 'a -> (svalue,'a) token
val SIGNAL: (int) *  'a * 'a -> (svalue,'a) token
val SHARED: (int) *  'a * 'a -> (svalue,'a) token
val SEVERITY: (int) *  'a * 'a -> (svalue,'a) token
val SELECT: (int) *  'a * 'a -> (svalue,'a) token
val ROR: (int) *  'a * 'a -> (svalue,'a) token
val ROL: (int) *  'a * 'a -> (svalue,'a) token
val RETURN: (int) *  'a * 'a -> (svalue,'a) token
val REPORT: (int) *  'a * 'a -> (svalue,'a) token
val REM: (int) *  'a * 'a -> (svalue,'a) token
val REJECT: (int) *  'a * 'a -> (svalue,'a) token
val REGISTER: (int) *  'a * 'a -> (svalue,'a) token
val RECORD: (int) *  'a * 'a -> (svalue,'a) token
val RANGE: (int) *  'a * 'a -> (svalue,'a) token
val PURE: (int) *  'a * 'a -> (svalue,'a) token
val PROTECTED: (int) *  'a * 'a -> (svalue,'a) token
val PROCESS: (int) *  'a * 'a -> (svalue,'a) token
val PROCEDURE: (int) *  'a * 'a -> (svalue,'a) token
val POSTPONED: (int) *  'a * 'a -> (svalue,'a) token
val PORT: (int) *  'a * 'a -> (svalue,'a) token
val PACKAGE: (int) *  'a * 'a -> (svalue,'a) token
val OUT: (int) *  'a * 'a -> (svalue,'a) token
val OTHERS: (int) *  'a * 'a -> (svalue,'a) token
val OR: (int) *  'a * 'a -> (svalue,'a) token
val OPEN: (int) *  'a * 'a -> (svalue,'a) token
val ON: (int) *  'a * 'a -> (svalue,'a) token
val OF: (int) *  'a * 'a -> (svalue,'a) token
val NULL: (int) *  'a * 'a -> (svalue,'a) token
val NOT: (int) *  'a * 'a -> (svalue,'a) token
val NOR: (int) *  'a * 'a -> (svalue,'a) token
val NEXT: (int) *  'a * 'a -> (svalue,'a) token
val NEW: (int) *  'a * 'a -> (svalue,'a) token
val NAND: (int) *  'a * 'a -> (svalue,'a) token
val MOD: (int) *  'a * 'a -> (svalue,'a) token
val MAP: (int) *  'a * 'a -> (svalue,'a) token
val LOOP: (int) *  'a * 'a -> (svalue,'a) token
val LITERAL: (int) *  'a * 'a -> (svalue,'a) token
val LINKAGE: (int) *  'a * 'a -> (svalue,'a) token
val LIBRARY: (int) *  'a * 'a -> (svalue,'a) token
val LABEL: (int) *  'a * 'a -> (svalue,'a) token
val IS: (int) *  'a * 'a -> (svalue,'a) token
val INOUT: (int) *  'a * 'a -> (svalue,'a) token
val INERTIAL: (int) *  'a * 'a -> (svalue,'a) token
val IN: (int) *  'a * 'a -> (svalue,'a) token
val IMPURE: (int) *  'a * 'a -> (svalue,'a) token
val IF: (int) *  'a * 'a -> (svalue,'a) token
val GUARDED: (int) *  'a * 'a -> (svalue,'a) token
val GROUP: (int) *  'a * 'a -> (svalue,'a) token
val GENERIC: (int) *  'a * 'a -> (svalue,'a) token
val GENERATE: (int) *  'a * 'a -> (svalue,'a) token
val FUNCTION: (int) *  'a * 'a -> (svalue,'a) token
val FOR: (int) *  'a * 'a -> (svalue,'a) token
val FILE: (int) *  'a * 'a -> (svalue,'a) token
val EXIT: (int) *  'a * 'a -> (svalue,'a) token
val ENTITY: (int) *  'a * 'a -> (svalue,'a) token
val END: (int) *  'a * 'a -> (svalue,'a) token
val ELSIF: (int) *  'a * 'a -> (svalue,'a) token
val ELSE: (int) *  'a * 'a -> (svalue,'a) token
val DOWNTO: (int) *  'a * 'a -> (svalue,'a) token
val DISCONNECT: (int) *  'a * 'a -> (svalue,'a) token
val CONSTANT: (int) *  'a * 'a -> (svalue,'a) token
val CONFIGURATION: (int) *  'a * 'a -> (svalue,'a) token
val COMPONENT: (int) *  'a * 'a -> (svalue,'a) token
val CASE: (int) *  'a * 'a -> (svalue,'a) token
val BUS: (int) *  'a * 'a -> (svalue,'a) token
val BUFFER: (int) *  'a * 'a -> (svalue,'a) token
val BODY: (int) *  'a * 'a -> (svalue,'a) token
val BLOCK: (int) *  'a * 'a -> (svalue,'a) token
val BEGIN: (int) *  'a * 'a -> (svalue,'a) token
val ATRIBUTE: (int) *  'a * 'a -> (svalue,'a) token
val ASSERT: (int) *  'a * 'a -> (svalue,'a) token
val ARRAY: (int) *  'a * 'a -> (svalue,'a) token
val ARCHITECTURE: (int) *  'a * 'a -> (svalue,'a) token
val AND: (int) *  'a * 'a -> (svalue,'a) token
val ALL: (int) *  'a * 'a -> (svalue,'a) token
val ALIAS: (int) *  'a * 'a -> (svalue,'a) token
val AFTER: (int) *  'a * 'a -> (svalue,'a) token
val ACCESS: (int) *  'a * 'a -> (svalue,'a) token
val ABS: (int) *  'a * 'a -> (svalue,'a) token
val RSQUARE: (int) *  'a * 'a -> (svalue,'a) token
val LSQUARE: (int) *  'a * 'a -> (svalue,'a) token
val BAR: (int) *  'a * 'a -> (svalue,'a) token
val GT: (int) *  'a * 'a -> (svalue,'a) token
val EQ: (int) *  'a * 'a -> (svalue,'a) token
val LT: (int) *  'a * 'a -> (svalue,'a) token
val SEMICOLON: (int) *  'a * 'a -> (svalue,'a) token
val COLON: (int) *  'a * 'a -> (svalue,'a) token
val DIV: (int) *  'a * 'a -> (svalue,'a) token
val DOT: (int) *  'a * 'a -> (svalue,'a) token
val MINUS: (int) *  'a * 'a -> (svalue,'a) token
val COMMA: (int) *  'a * 'a -> (svalue,'a) token
val PLUS: (int) *  'a * 'a -> (svalue,'a) token
val MULT: (int) *  'a * 'a -> (svalue,'a) token
val RPARAN: (int) *  'a * 'a -> (svalue,'a) token
val LPARAN: (int) *  'a * 'a -> (svalue,'a) token
val DOUBLEQUES: (int) *  'a * 'a -> (svalue,'a) token
val DOUBLEARROW: (int) *  'a * 'a -> (svalue,'a) token
val QUESTION: (int) *  'a * 'a -> (svalue,'a) token
val INVERTEDCOMMA: (int) *  'a * 'a -> (svalue,'a) token
val HASH: (int) *  'a * 'a -> (svalue,'a) token
val BACKTICK: (int) *  'a * 'a -> (svalue,'a) token
val UNDERSCORE: (int) *  'a * 'a -> (svalue,'a) token
val TICK: (int) *  'a * 'a -> (svalue,'a) token
val AMP: (int) *  'a * 'a -> (svalue,'a) token
val BOX: (int) *  'a * 'a -> (svalue,'a) token
val LE: (int) *  'a * 'a -> (svalue,'a) token
val GE: (int) *  'a * 'a -> (svalue,'a) token
val NEQ: (int) *  'a * 'a -> (svalue,'a) token
val ASSIGN: (int) *  'a * 'a -> (svalue,'a) token
val EXPT: (int) *  'a * 'a -> (svalue,'a) token
val ARROW: (int) *  'a * 'a -> (svalue,'a) token
val EOF: (int) *  'a * 'a -> (svalue,'a) token
val NUM: (string*int) *  'a * 'a -> (svalue,'a) token
val UPPER_CASE: (string*int) *  'a * 'a -> (svalue,'a) token
val LOWER_CASE: (string*int) *  'a * 'a -> (svalue,'a) token
end
signature Whl_LRVALS=
sig
structure Tokens : Whl_TOKENS
structure ParserData:PARSER_DATA
sharing type ParserData.Token.token = Tokens.token
sharing type ParserData.svalue = Tokens.svalue
end
